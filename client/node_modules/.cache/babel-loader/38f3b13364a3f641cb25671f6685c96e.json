{"ast":null,"code":"var _jsxFileName = \"/Users/jasper/Desktop/swd/full_stack/interval_timer_player/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport classes from './App.module.css';\nimport PlayerFrame from './components/PlayerFrame/PlayerFrame.js';\nimport TimeFrame from './components/TimeFrame/TimeFrame.js';\nimport EditTimeFrame from './components/EditTimeFrame/EditTimeFrame.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // Timer states\n  const [isEditing, setIsEditing] = useState(false);\n  const [format, setFormat] = useState(\"00:00\");\n  const [timer, setTimer] = useState(\"00:00\");\n  const [isCounting, setIsCounting] = useState(false);\n\n  // Collapsable states\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  // Store total seconds\n  let timerRef;\n  const handleSetTime = time => {\n    setTimer(time);\n  };\n  const handleSetIsEditing = () => {\n    setIsEditing(prev => !prev);\n  };\n  const handleSetFormat = format => {\n    setFormat(format);\n  };\n  let startTimer = useRef(null);\n  const onStart = () => {\n    // if timer is at 00:00, do nothing\n    if (timer === \"00:00\") return;\n    startTimer.current = setInterval(() => {\n      if (timerRef === 0) {\n        clearInterval(startTimer.current);\n        setIsCounting(false);\n        return;\n      }\n      updateTimer();\n    }, 1000);\n    setIsCounting(prev => !prev);\n  };\n  const onPause = () => {\n    setIsCounting(prev => !prev);\n    clearInterval(startTimer.current);\n  };\n  const updateTimer = () => {\n    setTimer(prevTime => {\n      // Decrease by 1 from the total second\n      let totalSeconds = getSeconds(prevTime) - 1;\n      timerRef = totalSeconds;\n      let timeString;\n\n      // Convert totalSeconds to hour, minute, and second to allow max hour = 99\n      let hour = Math.floor(totalSeconds / 3600);\n      let minute = Math.floor(totalSeconds % 3600 / 60);\n      let second = Math.floor(totalSeconds % 3600 % 60);\n\n      // Add 0 in front if single digt\n      hour = hour < 10 ? \"0\" + hour : hour;\n      minute = minute < 10 ? \"0\" + minute : minute;\n      second = second < 10 ? \"0\" + second : second;\n\n      // Represent HH:mm:ss if totalSeconds is over 3600(1hr), else mm:ss\n      totalSeconds >= 3600 ? timeString = hour + \":\" + minute + \":\" + second : timeString = minute + \":\" + second;\n      return timeString;\n    });\n  };\n  const getSeconds = time => {\n    // convert string time to total seconds\n    let timeArr = time.split(':');\n    let hour = timeArr.length === 3 ? timeArr[0] : 0;\n    let minute = timeArr.length === 2 ? timeArr[0] : timeArr[1];\n    let second = timeArr.length === 3 ? timeArr[2] : timeArr[1];\n    let seconds = +hour * 60 * 60 + +minute * 60 + +second;\n    return seconds;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.timerFrameWrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: !isEditing ? /*#__PURE__*/_jsxDEV(TimeFrame, {\n          handleSetIsEditing: handleSetIsEditing,\n          format: format,\n          timer: timer,\n          onStart: onStart,\n          onPause: onPause,\n          isCounting: isCounting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(EditTimeFrame, {\n          handleSetIsEditing: handleSetIsEditing,\n          handleSetFormat: handleSetFormat,\n          handleSetTime: handleSetTime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(PlayerFrame, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"0uSkH9O/+sT5SDPX6Bz1lrJvQB8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","classes","PlayerFrame","TimeFrame","EditTimeFrame","App","isEditing","setIsEditing","format","setFormat","timer","setTimer","isCounting","setIsCounting","isCollapsed","setIsCollapsed","timerRef","handleSetTime","time","handleSetIsEditing","prev","handleSetFormat","startTimer","onStart","current","setInterval","clearInterval","updateTimer","onPause","prevTime","totalSeconds","getSeconds","timeString","hour","Math","floor","minute","second","timeArr","split","length","seconds","timerFrameWrapper"],"sources":["/Users/jasper/Desktop/swd/full_stack/interval_timer_player/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\n\nimport classes from './App.module.css'\nimport PlayerFrame from './components/PlayerFrame/PlayerFrame.js'\nimport TimeFrame from './components/TimeFrame/TimeFrame.js'\nimport EditTimeFrame from './components/EditTimeFrame/EditTimeFrame.js'\n\nconst App = () => {\n\n    // Timer states\n    const [isEditing, setIsEditing] = useState(false) \n    const [format, setFormat] = useState(\"00:00\")\n    const [timer, setTimer] = useState(\"00:00\")\n    const [isCounting, setIsCounting] = useState(false)\n\n    // Collapsable states\n    const [isCollapsed, setIsCollapsed] = useState(true)\n\n    // Store total seconds\n    let timerRef;\n\n    const handleSetTime = (time) => {\n      setTimer( time )\n    }\n\n    const handleSetIsEditing = () => {\n      setIsEditing( (prev) => !prev )\n    }\n\n    const handleSetFormat = (format) => {\n      setFormat(format)\n    }\n\n    let startTimer = useRef(null)\n\n    const onStart = () => {\n      // if timer is at 00:00, do nothing\n      if (timer === \"00:00\") return\n\n      startTimer.current = setInterval( ()=>{\n        if ( timerRef === 0 ) {\n          clearInterval(startTimer.current);\n          setIsCounting(false)\n          return \n        }\n        updateTimer()\n      }, 1000)\n      setIsCounting( (prev) => !prev )\n    }\n\n    const onPause = () => {\n      setIsCounting( (prev) => !prev )\n      clearInterval(startTimer.current)\n    }\n\n    const updateTimer = () => {\n      setTimer( (prevTime) => {\n        // Decrease by 1 from the total second\n        let totalSeconds = getSeconds(prevTime) -1\n        timerRef = totalSeconds;\n        let timeString;\n\n        // Convert totalSeconds to hour, minute, and second to allow max hour = 99\n        let hour = Math.floor(totalSeconds / 3600);\n        let minute = Math.floor(totalSeconds % 3600 / 60);\n        let second = Math.floor(totalSeconds % 3600 % 60);\n\n        // Add 0 in front if single digt\n        hour = hour < 10 ? \"0\" + hour : hour\n        minute = minute < 10 ? \"0\" + minute : minute\n        second = second < 10 ? \"0\" + second : second\n\n        // Represent HH:mm:ss if totalSeconds is over 3600(1hr), else mm:ss\n        totalSeconds >= 3600 ? timeString = hour + \":\" + minute + \":\" + second : timeString = minute + \":\" + second\n      \n        return timeString;\n      })\n    }\n\n    const getSeconds = (time) => {\n      // convert string time to total seconds\n      let timeArr = time.split(':'); \n      let hour = timeArr.length === 3 ? timeArr[0] : 0\n      let minute = timeArr.length === 2 ? timeArr[0] : timeArr[1]\n      let second = timeArr.length ===3 ? timeArr[2] : timeArr[1]\n\n      let seconds = (+hour) * 60 * 60 + (+minute) * 60 + (+second);\n\n      return seconds\n    }\n\n    return (\n      <> \n          <div className={classes.timerFrameWrapper}>\n            <div>\n            { !isEditing ? \n                <TimeFrame \n                  handleSetIsEditing={handleSetIsEditing}\n                  format={format}\n                  timer={timer}\n                  onStart={onStart}\n                  onPause={onPause}\n                  isCounting={isCounting}\n                /> \n              : <EditTimeFrame \n                  handleSetIsEditing={handleSetIsEditing}\n                  handleSetFormat={handleSetFormat}\n                  handleSetTime={handleSetTime}\n                />  \n            }\n            </div>\n          </div>    \n          <PlayerFrame />\n      </>\n    )\n}\n\nexport default App"],"mappings":"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"},"metadata":{},"sourceType":"module"}